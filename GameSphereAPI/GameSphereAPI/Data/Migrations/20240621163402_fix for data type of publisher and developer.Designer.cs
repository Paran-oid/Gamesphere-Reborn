// <auto-generated />
using System;
using GameSphereAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameSphereAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240621163402_fix for data type of publisher and developer")]
    partial class fixfordatatypeofpublisheranddeveloper
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GamePublisher", b =>
                {
                    b.Property<int>("PublishersID")
                        .HasColumnType("integer");

                    b.Property<int>("gamesID")
                        .HasColumnType("integer");

                    b.HasKey("PublishersID", "gamesID");

                    b.HasIndex("gamesID");

                    b.ToTable("GamePublisher", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Achievement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.ToTable("Achievements", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.DLC", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.ToTable("DLCs", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Developer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric(3, 2)");

                    b.HasKey("ID");

                    b.ToTable("Developers", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Game", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("BackgroundPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("PicturesPaths")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Size")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("SysReq")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Games", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameDeveloper", b =>
                {
                    b.Property<int>("DeveloperID")
                        .HasColumnType("integer");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.HasKey("DeveloperID", "GameID");

                    b.HasIndex("GameID");

                    b.ToTable("GameDevelopers", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameGenre", b =>
                {
                    b.Property<int>("GenreID")
                        .HasColumnType("integer");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.HasKey("GenreID", "GameID");

                    b.HasIndex("GameID");

                    b.ToTable("GameGenres", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameLanguage", b =>
                {
                    b.Property<int>("LanguageID")
                        .HasColumnType("integer");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.HasKey("LanguageID", "GameID");

                    b.HasIndex("GameID");

                    b.ToTable("GameLanguages", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameTag", b =>
                {
                    b.Property<int>("TagID")
                        .HasColumnType("integer");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.HasKey("TagID", "GameID");

                    b.HasIndex("GameID");

                    b.ToTable("GameTags", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Genres", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("GameID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.ToTable("Languages", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.ToTable("News", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Publisher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric(3, 2)");

                    b.HasKey("ID");

                    b.ToTable("Publishers", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameID");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Tags", "gam");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Shopping_Related.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ShoppingCartID")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.HasIndex("ShoppingCartID");

                    b.ToTable("CartItems", "sho");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Shopping_Related.ShoppingCart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.ToTable("ShoppingCarts", "sho");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.Group_Related.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Groups", "grp");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.Group_Related.UserGroup", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<int>("GroupID")
                        .HasColumnType("integer");

                    b.HasKey("UserID", "GroupID");

                    b.HasIndex("GroupID");

                    b.ToTable("UserGroups", "usg");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserAchievement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AchievementID")
                        .HasColumnType("integer");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("AchievementID");

                    b.HasIndex("GameID");

                    b.ToTable("UserAchievements", "usr");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserDLC", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("DLCID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DatePurchased")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<bool>("HasDLC")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("DLCID");

                    b.HasIndex("GameID");

                    b.ToTable("UserDLCs", "usr");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserGame", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("HoursPlayed")
                        .HasColumnType("numeric");

                    b.Property<DateOnly?>("LastTimePlayed")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserGames", "usr");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserNotification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification", "usr");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AppRole");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("FavoriteGroupID")
                        .HasColumnType("integer");

                    b.Property<string>("Fname")
                        .HasColumnType("text");

                    b.Property<string>("Lname")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.HasIndex("FavoriteGroupID");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("GamePublisher", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", null)
                        .WithMany()
                        .HasForeignKey("gamesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Achievement", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("Achievements")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.DLC", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("DLCs")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameDeveloper", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Developer", "Developer")
                        .WithMany("GameDeveloper")
                        .HasForeignKey("DeveloperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("GameDevelopers")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameGenre", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameLanguage", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("GameLanguages")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Language", "Language")
                        .WithMany("GameLanguages")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.GameTag", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("GameTags")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Tag", "Tag")
                        .WithMany("GameTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Language", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", null)
                        .WithMany("Languages")
                        .HasForeignKey("GameID");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.News", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("News")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Review", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.User.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Shopping_Related.CartItem", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.Site_Models.Shopping_Related.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.Group_Related.UserGroup", b =>
                {
                    b.HasOne("GameSphereAPI.Models.User.Group_Related.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.User.AppUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserAchievement", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.User.UserGame", "Game")
                        .WithMany("Achievements")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserDLC", b =>
                {
                    b.HasOne("GameSphereAPI.Models.Site_Models.Game_Related.DLC", "DLC")
                        .WithMany()
                        .HasForeignKey("DLCID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameSphereAPI.Models.User.UserGame", "Game")
                        .WithMany("DLC")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DLC");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserGame", b =>
                {
                    b.HasOne("GameSphereAPI.Models.User.AppUser", null)
                        .WithMany("UserGames")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserNotification", b =>
                {
                    b.HasOne("GameSphereAPI.Models.User.AppUser", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.AppUser", b =>
                {
                    b.HasOne("GameSphereAPI.Models.User.Group_Related.Group", "FavoriteGroup")
                        .WithMany()
                        .HasForeignKey("FavoriteGroupID");

                    b.Navigation("FavoriteGroup");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Developer", b =>
                {
                    b.Navigation("GameDeveloper");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Game", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("DLCs");

                    b.Navigation("GameDevelopers");

                    b.Navigation("GameGenres");

                    b.Navigation("GameLanguages");

                    b.Navigation("GameTags");

                    b.Navigation("Languages");

                    b.Navigation("News");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Language", b =>
                {
                    b.Navigation("GameLanguages");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Game_Related.Tag", b =>
                {
                    b.Navigation("GameTags");
                });

            modelBuilder.Entity("GameSphereAPI.Models.Site_Models.Shopping_Related.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.Group_Related.Group", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.UserGame", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("DLC");
                });

            modelBuilder.Entity("GameSphereAPI.Models.User.AppUser", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserGames");

                    b.Navigation("UserGroups");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
